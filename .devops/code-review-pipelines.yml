variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  BRANCH_NAME: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaEcommerceLocal
      type: github
      name: pagopa/pagopa-ecommerce-local
      ref: CHK-4224-update-java-21
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: BuildEndUnitTest
    jobs:
      - job: make_buildEndUnitTest
        steps:
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Cache Maven local repo

          - task: SonarCloudPrepare@3
            displayName: 'Prepare SonarCloud analysis configuration'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
              organization: '$(SONARCLOUD_ORG)'
              scannerMode: Other
              extraProperties: |
                sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
                sonar.projectName=$(SONARCLOUD_PROJECT_NAME)
                sonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml
                sonar.junit.reportPaths=target/surefire-reports/
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '21'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: false
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'validate'
              sonarQubeRunAnalysis: false
            displayName: "Maven validate"
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '21'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: false
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'clean verify'
              sonarQubeRunAnalysis: true
            displayName: "Maven clean verify"
          - task: SonarCloudPublish@3
            displayName: 'Publish SonarCloud results on build summary'
            inputs:
              pollingTimeoutSec: '300'

          - task: PublishCodeCoverageResults@2
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'target/site/jacoco/jacoco.xml'
              reportDirectory: 'target/site/jacoco'
            displayName: 'Publish Code Coverage on Azure Devops'

  - stage: IntegrationTest
    dependsOn: []
    jobs:
      - job: make_integration_test
        steps:
          - checkout: pagopaEcommerceLocal
          - script: |
              echo "##[debug] Change placeholder for ecommerce-event-dispatcher-service set branch: $(BRANCH_NAME)"
              sed -i "s/^ECOMMERCE_EVENT_DISPATCHER_COMMIT_SHA=.*$/ECOMMERCE_EVENT_DISPATCHER_COMMIT_SHA=$(BRANCH_NAME)/" .env
            displayName: 'Change dispatcher branch name ecommerce-local .env'
          - script: |
              echo "Starting infrastructure services with health checks..."
              docker compose up mongo redis storage azurite-init -d

              echo "Waiting for infrastructure services to be healthy..."
              timeout 120 bash -c 'while true; do
                REDIS_STATUS=$(docker compose ps redis --format "{{.Status}}")
                MONGO_STATUS=$(docker compose ps mongo --format "{{.Status}}")

                echo "Redis status: $REDIS_STATUS"
                echo "Mongo status: $MONGO_STATUS"

                if [[ "$REDIS_STATUS" == *"healthy"* ]] && [[ "$MONGO_STATUS" == *"healthy"* ]]; then
                  echo "Infrastructure services are healthy!"
                  break
                fi

                sleep 5
              done'

              echo "Starting application services..."
              docker compose up pagopa-ecommerce-transactions-service pagopa-ecommerce-payment-methods-service pagopa-ecommerce-event-dispatcher-service pagopa-pdv-mock pagopa-gec-mock pagopa-npg-mock pagopa-node-mock traefik pagopa-psp-mock pagopa-notifications-service pagopa-jwt-issuer-mock -d
            displayName: 'Start services with proper health checks'

          - script: |
              echo "Waiting for event-dispatcher to be ready..."
              timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:${ECOMMERCE_EVENT_DISPATCHER_PORT}/actuator/health)" != "200" ]]; do 
                echo "Event-dispatcher not ready yet..."
                sleep 10
              done' || (
                echo "=== DEBUGGING INFORMATION ==="
                echo "=== Event Dispatcher Logs ==="
                docker compose logs --tail=50 pagopa-ecommerce-event-dispatcher-service
                echo "=== Redis Connection Test ==="
                docker compose exec pagopa-ecommerce-event-dispatcher-service sh -c "nc -zv pagopa-ecommerce-redis 6379" || echo "Redis connection failed"
                echo "=== Network Information ==="
                docker network ls
                docker compose ps
                exit 1
              )

              echo "All services are ready!"
            displayName: 'Health check with detailed debugging'
          - script: yarn global add newman
            displayName: 'newman installation'
          - script: newman run api-tests/transaction-service/npg/transaction-service_ecommerce_local.postman_collection.json --environment=api-tests/transaction-service/npg/transaction-service_ecommerce_local.postman_environment.json --reporters cli,junit --reporter-junit-export Results/NPG-api-TEST.xml
            displayName: 'Run api test for NPG integration'
          - script: newman run api-tests/transaction-service/redirect/transaction-service_ecommerce_local.postman_collection.json --environment=api-tests/transaction-service/redirect/transaction-service_ecommerce_local.postman_environment.json --reporters cli,junit --reporter-junit-export Results/REDIRECT-api-TEST.xml
            displayName: 'Run api test for REDIRECT integration'
          - script: newman run api-tests/event-dispatcher-service/ecommerce-event-dispatcher_tests.postman_collection.json --environment=api-tests/event-dispatcher-service/ecommerce-event-dispatcher_tests.postman_environment.json --reporters cli,junit --reporter-junit-export Results/event-dispatcher-api-TEST.xml
            displayName: 'Run api test for event-dispatcher'
            continueOnError: false
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'