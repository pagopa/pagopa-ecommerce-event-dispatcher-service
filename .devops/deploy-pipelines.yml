# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'
    - repository: pagopaEcommerceTests
      type: github
      name: pagopa/pagopa-ecommerce-tests
      ref: CHK-4329-event-dispatcher-integration-tests
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

# --- START Deploy DEV --- #
stages:

  - stage: 'Build_for_DEV'
    displayName: 'Build for DEV'
    condition: and(succeeded(), not(${{ parameters.SKIP_BUILD }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - script: |
              echo "mocked build"

  - stage: 'Deploy_for_DEV'
    displayName: 'Deploy DEV'
    dependsOn: Build_for_DEV
    condition: or(succeeded(), ${{ parameters.SKIP_BUILD }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      echo "mocked deploy"
  - stage: IntegrationTestDev
    displayName: "Integration test for DEV environment"
    dependsOn:
      - Deploy_for_DEV
    condition: |
      eq(dependencies.Deploy_for_DEV.result, 'Succeeded')
    jobs:
      - job: execute_integration_tests
        steps:
          - checkout: pagopaEcommerceTests
            path: ./s/pagopa-ecommerce-tests
          - task: JavaToolInstaller@0
            displayName: 'Installing JDK 21'
            inputs:
              versionSpec: "21"
              jdkArchitectureOption: x64
              jdkSourceOption: 'PreInstalled'
          - script: |
              ./mvnw validate -PinstallCommons
            displayName: "Install commons library"
            workingDirectory: ./s/pagopa-ecommerce-tests/integration_tests
          - script: |
              cp .env.dev .env
              ESCAPED_CONNECTION_STRING=$(echo "$(DEV_TRANSIENT_STORAGE_CONNECTION_STRING)" | sed -e 's/[\/&]/\\&/g')
              ESCAPED_PASSWORD=$(echo "$(DEV_MONGO_ECOMMERCE_PASSWORD)" | sed -e 's/[\/&]/\\&/g')
              sed -i "s/^QUEUE_TRANSIENT_CONNECTION_STRING=.*$/QUEUE_TRANSIENT_CONNECTION_STRING=$ESCAPED_CONNECTION_STRING/" .env
              sed -i "s/^MONGO_PASSWORD=.*$/MONGO_PASSWORD=$ESCAPED_PASSWORD/" .env
              export $(grep -v '^#' .env | xargs)
              ./mvnw test -PintegrationTests
            displayName: "Execute pending transaction code review tests"
            workingDirectory: ./s/pagopa-ecommerce-tests/integration_tests
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'
              testRunTitle: "DEV integration tests"
  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: [ ]
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
         eq(variables['Build.SourceBranch'], 'refs/heads/CHK-4323-integrate-tests-mocked-deploy'),
         startsWith(variables['Build.SourceBranch'], 'refs/tags')
         )
      )
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - script: |
              echo "mocked build"
          - template: azure-templates/chart-current-version.yml

  - stage: "Deploy_UAT_Blue"
    displayName: 'UAT blue deployment'
    dependsOn: Build_release_candidate
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_SKIP_BLUE_DEPLOYMENT}}, False)
      )
    variables:
      green_app_version: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - script: |
                    echo "mocked deploy"

  - stage: "Bluegreen_WaitForApproval"
    displayName: 'UAT green approval deployment'
    dependsOn: Deploy_UAT_Blue
    variables:
      commitUrl: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.commitUrl'] ]
    jobs:
      - job: Bluegreen_WaitForApproval
        displayName: Manual blue deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject UAT blue green promotions for $(commitUrl)"
              onTimeout: 'reject'


  - stage: "Get_Release_Version"
    displayName: "Get the app version to deploy"
    dependsOn: Build_release_candidate
    condition: in(dependencies.Build_release_candidate.result, 'Succeeded', 'Skipped')
    jobs:
      - job: "get_version"
        steps:
          - template: azure-templates/chart-current-version.yml

  - stage: "tag_docker_release"
    displayName: 'Tag Docker image to be release'
    dependsOn: Get_Release_Version
    condition:
      and(
      succeeded(),
      eq(${{parameters.SKIP_BUILD}}, False)
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version"
            inputs:
              targetType: "inline"
              script: |
                echo "mocked docker push"

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [ tag_docker_release,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.tag_docker_release.result, 'Succeeded', 'Skipped'),
        in(dependencies.Get_Release_Version.result, 'Succeeded', 'Skipped'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/CHK-4323-integrate-tests-mocked-deploy'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ] #chart app version, can differ from release for chart only version bumps
      release_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.version'] ] #chart version, this version is the same of the github release/tag
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      echo "mocked deploy"
                

  - stage: IntegrationTestUat
    displayName: "Integration tests for UAT environment"
    dependsOn:
      - Deploy_UAT_Green
    condition: |
      eq(dependencies.Deploy_UAT_Green.result, 'Succeeded')
    pool:
      name: pagopa-uat-linux
    jobs:
      - job: execute_integration_tests
        steps:
          - checkout: pagopaEcommerceTests
            path: ./s/pagopa-ecommerce-tests
          - script: |
              docker build -t maven_test_runner .
            displayName: "Build docker test image runner"
            workingDirectory: ./s/pagopa-ecommerce-tests/integration_tests
          - script: |
              cp .env.uat .env
              ESCAPED_CONNECTION_STRING=$(echo "$(UAT_TRANSIENT_STORAGE_CONNECTION_STRING)" | sed -e 's/[\/&]/\\&/g')
              ESCAPED_PASSWORD=$(echo "$(UAT_MONGO_ECOMMERCE_PASSWORD)" | sed -e 's/[\/&]/\\&/g')
              sed -i "s/^QUEUE_TRANSIENT_CONNECTION_STRING=.*$/QUEUE_TRANSIENT_CONNECTION_STRING=$ESCAPED_CONNECTION_STRING/" .env
              sed -i "s/^MONGO_PASSWORD=.*$/MONGO_PASSWORD=$ESCAPED_PASSWORD/" .env
              docker run --mount type=bind,src=$PWD,dst=/workspace/app maven_test_runner integration
            displayName: "Execute pending transaction code review tests"
            workingDirectory: ./s/pagopa-ecommerce-tests/integration_tests
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'
              testRunTitle: "UAT integration tests"
  # --- END Deploy UAT --- #
