# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply (release is done automatically when deploying on UAT and skipped on DEV) '
    type: string
    values:
      - major
      - minor
      - patch
      - none
    default: patch
  - name: 'RELEASE_CHART_SEMVER'
    displayName: 'When upgrading helm chart, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: patch
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "SKIP_RELEASE"
    displayName: "Skip release"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

# --- START Deploy DEV --- #
stages:

  - stage: 'Build_for_DEV'
    displayName: 'Build for DEV'
    condition: and(succeeded(), not(${{ parameters.SKIP_BUILD }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}

  - stage: 'Deploy_for_DEV'
    displayName: 'Deploy DEV'
    dependsOn: Build_for_DEV
    condition: or(succeeded(), ${{ parameters.SKIP_BUILD }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'DEV'
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-dev.yaml"
                    GREEN_VERSION: $(Build.SourceVersion)
                    BLUE_VERSION: $(Build.SourceVersion)
  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: [ ]
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
         eq(variables['Build.SourceBranch'], 'refs/heads/main'),
         startsWith(variables['Build.SourceBranch'], 'refs/tags')
         )
      )
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
          - template: azure-templates/chart-current-version.yml

  - stage: "Deploy_UAT_Blue"
    displayName: 'UAT blue deployment'
    dependsOn: Build_release_candidate
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_SKIP_BLUE_DEPLOYMENT}}, False)
      )
    variables:
      green_app_version: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: beta-$(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(green_app_version)
                    BLUE_VERSION: $(Build.SourceVersion)

  - stage: "Bluegreen_WaitForApproval"
    displayName: 'UAT green approval deployment'
    dependsOn: Deploy_UAT_Blue
    variables:
      commitUrl: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.commitUrl'] ]
    jobs:
      - job: Bluegreen_WaitForApproval
        displayName: Manual blue deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject UAT blue green promotions for $(commitUrl)"
              onTimeout: 'reject'

  - stage: Release
    ${{ if eq(parameters['UAT_SKIP_BLUE_DEPLOYMENT'], True) }}:
      dependsOn: Build_release_candidate
    ${{ if eq(parameters['UAT_SKIP_BLUE_DEPLOYMENT'], False) }}:
      dependsOn: Bluegreen_WaitForApproval
      condition: succeeded()
    jobs:
      - job: make_release
        displayName: Make github release
        steps:
          - ${{ if eq(parameters['SKIP_RELEASE'], False) }}:
              - template: templates/node-job-setup/template.yaml@pagopaCommons
                parameters:
                  persistCredentials: true
              - template: azure-templates/chart-github-release.yml
                parameters:
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  release_branch: main
                  semver_chart: '${{ parameters.RELEASE_CHART_SEMVER }}'
                  semver: '${{ parameters.RELEASE_SEMVER }}'
          - template: azure-templates/chart-current-version.yml

  - stage: "tag_docker_release"
    displayName: 'Tag Docker image to be release'
    dependsOn: Release
    condition:
      and(
      succeeded(),
      ne('${{parameters.RELEASE_SEMVER}}', 'none')
      )
    variables:
      app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [ tag_docker_release,Release ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.tag_docker_release.result, 'Succeeded', 'Skipped'),
        in(dependencies.Release.result, 'Succeeded', 'Skipped'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
      )
    variables:
      app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ] #chart app version, can differ from release for chart only version bumps
      release_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.version'] ] #chart version, this version is the same of the github release/tag
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                  # without the below checkout git head is set on the commit before release version bump
                  # so deployed helm release have the previous version instead of the app one
                - script: |
                    checkoutVersion=$(release_version)
                    echo "Checkout release version repo tag: [$checkoutVersion]" 
                    git checkout $checkoutVersion
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(app_version)
  # --- END Deploy UAT --- #

  # --- START Deploy PROD --- #
  - stage: "Prod_WaitForApproval"
    displayName: 'PROD approval deployment'
    dependsOn: [ Deploy_UAT_Green,Release ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Deploy_UAT_Green.result, 'Succeeded'),
        in(dependencies.Release.result, 'Succeeded', 'Skipped')
      )
    variables:
      release_url: $[ stageDependencies.Release.make_release.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Prod_Approval
        displayName: Manual prod deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD promotions for release $(release_url)"
              onTimeout: 'reject'

#  - stage: "Build_PROD_Blue"
#    displayName: 'PROD blue Build'
#    dependsOn: [ Prod_WaitForApproval,Release ]
#    condition: |
#      and(
#        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
#        eq(${{parameters.PROD_SKIP_BLUE_DEPLOYMENT}}, False),
#        eq(dependencies.Prod_WaitForApproval.result, 'Succeeded'),
#        in(dependencies.Release.result, 'Succeeded', 'Skipped')
#      )
#    variables:
#      app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ]
#    jobs:
#      - job: "PROD_image"
#        displayName: 'Build PROD image'
#        steps:
#          - task: Docker@2
#            displayName: "docker login for UAT"
#            inputs:
#              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
#              command: "login"
#          - task: Bash@3
#            displayName: "docker tag new version for PROD"
#            inputs:
#              targetType: "inline"
#              script: |
#                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)
#                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version) $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
#          - task: Docker@2
#            displayName: "docker login for PROD"
#            inputs:
#              containerRegistry: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
#              command: "login"
#          - task: Bash@3
#            displayName: "Push new version for PROD"
#            inputs:
#              targetType: "inline"
#              script: |
#                docker push $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
#  - stage: "Deploy_PROD_Blue"
#    displayName: 'PROD blue deployment'
#    dependsOn: [ Build_PROD_Blue,Release ]
#    condition: |
#      and(
#        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
#        eq(${{parameters.PROD_SKIP_BLUE_DEPLOYMENT}}, False),
#        eq(dependencies.Build_PROD_Blue.result, 'Succeeded'),
#        in(dependencies.Release.result, 'Succeeded', 'Skipped')
#      )
#    variables:
#      app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ]
#    jobs:
#      - deployment: "Blue_PROD_deployment"
#        displayName: "Blue PROD deployment"
#        pool:
#          name: pagopa-prod-linux
#        environment: 'PROD'
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - checkout: self
#                  displayName: "Checkout"
#                - task: Bash@3
#                  name: update_chart_version
#                  displayName: 'Setup helm microservice chart'
#                  inputs:
#                    targetType: "inline"
#                    script: |
#                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
#                      helm dep build helm
#                - template: azure-templates/helm-microservice-chart-deploy.yml
#                  parameters:
#                    DO_DEPLOY: true
#                    DO_BLUE_GREEN_DEPLOY: true
#                    ENV: 'PROD'
#                    KUBERNETES_SERVICE_CONN: $(PROD_KUBERNETES_SERVICE_CONN)
#                    NAMESPACE: ecommerce
#                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
#                    VALUE_FILE: "helm/values-prod.yaml"
#                    GREEN_VERSION: $(app_version)
#                    BLUE_VERSION: $(Build.SourceVersion)

#  - stage: "PROD_Green_WaitForApproval"
#    displayName: 'PROD green approval deployment'
#    ${{ if eq(parameters['PROD_SKIP_BLUE_DEPLOYMENT'], True) }}:
#      dependsOn: Prod_WaitForApproval
#      condition: |
#        and(
#          eq(${{parameters.UAT_PROD_DEPLOY}}, true),
#          eq(dependencies.Prod_WaitForApproval.result, 'Succeeded')
#        )
#    ${{ if eq(parameters['PROD_SKIP_BLUE_DEPLOYMENT'], False) }}:
#      dependsOn: Deploy_PROD_Blue
#    variables:
#      release_url: $[ stageDependencies.Release.make_release.outputs['chart_current_version.releaseUrl'] ]
#    jobs:
#      - job: Bluegreen_PROD_WaitForApproval
#        displayName: Manual green deploy approval
#        pool: server
#        timeoutInMinutes: 4320 # 3 days
#        steps:
#          - task: ManualValidation@0
#            timeoutInMinutes: 4320 # 3 days
#            inputs:
#              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
#              instructions: "Please approve or reject PROD green promotions for release $(release_url)"
#              onTimeout: 'reject'

  - stage: "Build_PROD_Green"
    displayName: 'PROD green Build'
    dependsOn: [ Prod_WaitForApproval,Release ]
    variables:
      prod_app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Prod_WaitForApproval.result, 'Succeeded'),
        in(dependencies.Release.result, 'Succeeded', 'Skipped')
      )
    jobs:
      - job: "PROD_image"
        displayName: 'Build PROD image'
        steps:
          - task: Docker@2
            displayName: "docker login for UAT"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_app_version)
          - task: Docker@2
            displayName: "docker login for PROD"
            inputs:
              containerRegistry: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_app_version) $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_app_version)
                docker push $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_app_version)

  # STEP 0: retrieve current release version from helm release
  - stage: Current_Helm_Release
    displayName: Retrieve current deployed helm release
    dependsOn: Build_PROD_Green
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: list_event_dispatcher_helm_releases
        displayName: List event dispatcher helm releases
        steps:
          - task: HelmDeploy@0
            displayName: List event dispatcher releases
            name: helm_event_dispatcher_releases
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              namespace: ecommerce
              command: ls
              arguments: --filter ^$(K8S_IMAGE_REPOSITORY_NAME)$ --output json
          - task: Bash@3
            name: helm_chart_version
            displayName: 'Retrieve helm chart version associated to helm release'
            inputs:
              targetType: "inline"
              script: |
                version=$(echo '$(helm_event_dispatcher_releases.helmOutput)' | yq '.[].chart' | sed -e 's/pagopa-ecommerce-event-dispatcher-//g')
                echo "##vso[task.setvariable variable=helm_current_release_version;isOutput=true]$version"
              failOnStderr: false

  # STEP 1: deploy current PROD version as STAGING release (used for rollback purpose)
  - stage: Staging_Deploy_Approval
    displayName: Staging deploy approval
    dependsOn: Current_Helm_Release
    condition: succeeded()
    pool: server
    variables:
      currentVersion: $[ stageDependencies.Current_Helm_Release.list_event_dispatcher_helm_releases.outputs['helm_chart_version.helm_current_release_version'] ]
    jobs:
      - job: Staging_Deploy_Approval
        displayName: Manual staging deploy current PROD version approval
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve deploy current PROD version: [$(currentVersion)] as STAGING deploy"
              onTimeout: 'reject'
  - stage: Staging_Deploy
    dependsOn:
      - Current_Helm_Release
      - Staging_Deploy_Approval
    condition: succeeded()
    pool:
      name: pagopa-prod-linux
    variables:
      currentVersion: $[ stageDependencies.Current_Helm_Release.list_event_dispatcher_helm_releases.outputs['helm_chart_version.helm_current_release_version'] ]
    jobs:
      - deployment: Staging_Deploy
        environment: PROD
        displayName: Deploy current prod version as STAGING deployment
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout repository"
                - script: |
                    checkoutVersion=$(currentVersion)
                    echo "Checkout current version repo tag: [$checkoutVersion]" 
                    git checkout $checkoutVersion
                  displayName: 'Checkout currently PROD deployed source code tag [$(currentVersion)]'
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - task: HelmDeploy@0
                  condition: succeeded()
                  displayName: Deploy current PROD version $(currentVersion) as STAGING release
                  inputs:
                    kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
                    namespace: ecommerce
                    command: upgrade
                    chartType: filepath
                    chartPath: helm
                    chartName: $(K8S_IMAGE_REPOSITORY_NAME)-stage
                    releaseName: $(K8S_IMAGE_REPOSITORY_NAME)-stage
                    valueFile: helm/values-prod.yaml
                    install: true
                    waitForExecution: true
                    arguments: --timeout 5m0s
                    overrideValues: microservice-chart.ingress.path=/pagopa-ecommerce-event-dispatcher-staging/(.*),microservice-chart.envConfig.DEPLOYMENT_VERSION=STAGING

  # STEP 2: enable STAGING deployment receivers and stop PROD one by command curl
  - stage: Start_Staging_Stop_Prod_Receivers_Manual_Approve
    displayName: Start STAGING receivers and stop PROD ones approval
    dependsOn: Staging_Deploy
    pool: server
    jobs:
      - job: Start_Staging_Stop_Prod_Receivers_Manual_Approve
        displayName: Manual STAGING receivers start and PROD receivers stop approval
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve enable STAGING deployment receivers"
              onTimeout: 'reject'
  - stage: Start_Staging_Stop_Prod_Receivers
    displayName: Start STAGING receivers and stop PROD ones
    dependsOn: Start_Staging_Stop_Prod_Receivers_Manual_Approve
    condition: succeeded()
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Start_Staging_Stop_Prod_Receivers
        steps:
          - template: azure-templates/start-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: STAGING
          - template: azure-templates/stop-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: PROD


  # STEP 3: Deploy new release as Deployment PROD approval task
  - stage: Deploy_New_Version_Approval
    displayName: Deploy the new release version
    dependsOn:
      - Start_Staging_Stop_Prod_Receivers
      - Release
    variables:
      newReleaseVersion: $[ stageDependencies.Release.make_release.outputs['chart_current_version.version'] ]
    condition: succeeded()
    pool: server
    jobs:
      - job: New_Version_Deploy_Approval
        displayName: New version deploy manual approve
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve upgrade PROD helm release to version: [$(newReleaseVersion)]"
              onTimeout: 'reject'
  - stage: Deploy_New_Version
    displayName: Deploy NEW version
    dependsOn:
      - Deploy_New_Version_Approval
      - Release
    variables:
      newReleaseVersion: $[ stageDependencies.Release.make_release.outputs['chart_current_version.version'] ]
    condition: succeeded()
    pool:
      name: pagopa-prod-linux
    jobs:
      - deployment: New_Version_Deploy
        environment: PROD
        displayName: New version deploy
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout repository"
                - script: |
                    checkoutVersion=$(newReleaseVersion)
                    echo "Checkout new release version repo tag: [$checkoutVersion]" 
                    git checkout $checkoutVersion
                  displayName: 'Checkout new release version tag [$(newReleaseVersion)]'
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - task: HelmDeploy@0
                  condition: succeeded()
                  displayName: Deploy new version as NEW release
                  inputs:
                    kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
                    namespace: ecommerce
                    command: upgrade
                    chartType: filepath
                    chartPath: helm
                    chartName: $(K8S_IMAGE_REPOSITORY_NAME)
                    releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
                    valueFile: helm/values-prod.yaml
                    install: true
                    waitForExecution: true
                    arguments: --timeout 5m0s
                    overrideValues: microservice-chart.envConfig.DEPLOYMENT_VERSION=PROD

  # STEP 4: once new version is deployed, proceed to start new receivers and stop staging ones
  - stage: Start_New_Stop_Staging_Receivers_Approval
    displayName: Start new receivers and stop staging ones manual approval
    dependsOn: Deploy_New_Version
    pool: server
    jobs:
      - job: Start_New_Stop_Staging_Receivers_Approval
        timeoutInMinutes: 30
        displayName: Start new receivers and stop staging ones
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve enable PROD receivers and disable staging ones"
              onTimeout: 'reject'
  - stage: Start_New_Stop_Staging_Receivers
    displayName: Start new receivers and stop staging ones
    dependsOn: Start_New_Stop_Staging_Receivers_Approval
    condition: succeeded()
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Start_New_Stop_Staging_Receivers
        displayName: Start new receivers by curl command and stop staging ones
        steps:
          - template: azure-templates/start-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: PROD
          - template: azure-templates/stop-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: STAGING


  # STEP 5: deployment rollout ended, scale down staging deployment PODS
  - stage: Scale_Down_Staging_Deployment_Approval
    dependsOn: Start_New_Stop_Staging_Receivers
    displayName: Approval for scale down STAGING deployment PODS
    pool: server
    jobs:
      - job: Scale_Down_Staging_Deployment_Approval
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve scale STAGING deployment down to 0 pods"
              onTimeout: 'reject'
  - stage: Scale_Down_Staging_Deployment
    dependsOn: Scale_Down_Staging_Deployment_Approval
    displayName: Scale down STAGING deployment to 0 pods
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Scale_Down_Staging_Deployment
        displayName: Annotate scaledObject with autoscaling.keda.sh/paused-replicas="0"
        steps:
          - task: Kubernetes@1
            displayName: Scale down STAGING receivers PODS (annotate ScaledObject with autoscaling.keda.sh/paused-replicas="0")
            continueOnError: true
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              kubernetesCluster: $(kubernetesCluster)
              namespace: ecommerce
              command: annotate
              arguments: scaledobjects $(K8S_IMAGE_REPOSITORY_NAME)-stage-microservice-chart autoscaling.keda.sh/paused-replicas="0"


  # --- END Deploy PROD --- #

  # --- START ROLLBACK PROD --- #
  - stage: "Prod_RollbackForApproval"
    displayName: 'PROD ROLLBACK'
    dependsOn: [ Scale_Down_Staging_Deployment,Release ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Scale_Down_Staging_Deployment.result, 'Succeeded'),
        in(dependencies.Release.result, 'Succeeded', 'Skipped')
      )
    variables:
      release_url: $[ stageDependencies.Release.make_release.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Prod_Rollback_Approval
        displayName: Manual prod rollback approval
        pool: server
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD rollback for release $(release_url)"
              onTimeout: 'skip'
  # STEP 0: scale up staging release (by removing annotation on staging release scaledObject)
  - stage: Scale_Up_Staging_Deployment
    displayName: Scale up STAGING deployment
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Scale_Up_Staging_Deployment
        displayName: Remove annotation autoscaling.keda.sh/paused-replicas="0" from staging release scaledObject
        steps:
          - task: Kubernetes@1
            displayName: Remove annotation autoscaling.keda.sh/paused-replicas="0" from staging release scaledObject
            continueOnError: true
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              kubernetesCluster: $(kubernetesCluster)
              namespace: ecommerce
              command: annotate
              arguments: scaledobjects $(K8S_IMAGE_REPOSITORY_NAME)-stage-microservice-chart autoscaling.keda.sh/paused-replicas-

  # STEP 1: start staging receivers and stop new ones
  - stage: Start_Staging_Stop_New_Receivers_Manual_Approve_Rollback
    displayName: Start STAGING receivers and stop NEW ones approval for Rollback
    dependsOn: Scale_Up_Staging_Deployment
    pool: server
    jobs:
      - job: Start_Staging_Stop_New_Receivers_Manual_Approve_Rollback
        displayName: Approve start STAGING receivers and stop NEW for rollback processing (swap back deployments)
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve enable STAGING receivers and stop NEW ones for deploy rollback (swap back)"
              onTimeout: 'reject'
  - stage: Start_Staging_Stop_New_Receivers_Rollback
    displayName: Start STAGING receivers and stop new ones
    dependsOn: Start_Staging_Stop_New_Receivers_Manual_Approve_Rollback
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Start_Staging_Stop_New_Receivers_Rollback
        displayName: Start STAGING receivers and stop new ones for rollback processing (swap back deployments)
        steps:
          - template: azure-templates/start-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: STAGING
          - template: azure-templates/stop-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: PROD

  # STEP 2: rollback new release
  - stage: Rollback_New_Deployment_Helm_Release
    displayName: Rollback NEW deployment helm release
    dependsOn: Start_Staging_Stop_New_Receivers_Rollback
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Rollback_New_Deployment_Helm_Release
        displayName: Rollback new helm release to previous version
        steps:
          - task: HelmDeploy@0
            displayName: Helm Rollback PROD new release
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              namespace: ecommerce
              command: rollback
              chartName: $(K8S_IMAGE_REPOSITORY_NAME)
              releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
              install: true
              waitForExecution: true
              arguments: $(K8S_IMAGE_REPOSITORY_NAME)
  # STEP 3: start prod receivers and stop staging ones
  - stage: Start_New_Stop_Staging_Receivers_Manual_Approve_Rollback
    displayName: Start NEW receivers and stop STAGING one approval for Rollback
    dependsOn: Rollback_New_Deployment_Helm_Release
    pool: server
    jobs:
      - job: Start_New_Stop_Staging_Receivers_Manual_Approve_Rollback
        displayName: Approve start PROD deployment receivers and stop STAGING for rollback processing (swap back deployments)
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve enable PROD deployment receivers and stop STAGING ones for deploy rollback (swap back)"
              onTimeout: 'reject'
  - stage: Start_New_Stop_Staging_Receivers_Rollback
    displayName: Start PROD receivers and stop STAGING one approval for Rollback
    dependsOn: Start_New_Stop_Staging_Receivers_Manual_Approve_Rollback
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Start_New_Stop_Staging_Receivers_Rollback
        displayName: Start PROD receivers and stop STAGING for rollback processing (swap back deployments)
        steps:
          - template: azure-templates/start-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: PROD
          - template: azure-templates/stop-receivers.yml
            parameters:
              ENV: PROD
              TARGET_DEPLOYMENT_VERSION: STAGING
  # STEP 4: scale down staging release (by adding back annotation to scaledObject)
  - stage: Scale_Down_Staging_Deployment_Approval_Rollback
    dependsOn: Start_New_Stop_Staging_Receivers_Rollback
    displayName: Approval for scale down STAGING deployment PODS to 0
    pool: server
    jobs:
      - job: Scale_Down_Staging_Deployment_Approval
        timeoutInMinutes: 30
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Approve scale STAGING deployment down to 0 pods"
              onTimeout: 'reject'
  - stage: Scale_Down_Staging_Deployment_Rollback
    dependsOn: Scale_Down_Staging_Deployment_Approval_Rollback
    displayName: Scale down STAGING deployment to 0 pods
    pool:
      name: pagopa-prod-linux
    jobs:
      - job: Scale_Down_Staging_Deployment_Rollback
        displayName: Annotate staging release scaledObject with autoscaling.keda.sh/paused-replicas="0"
        steps:
          - task: Kubernetes@1
            displayName: Scale down staging receivers PODS (annotate ScaledObject with autoscaling.keda.sh/paused-replicas="0")
            continueOnError: true
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              kubernetesCluster: $(kubernetesCluster)
              namespace: ecommerce
              command: annotate
              arguments: scaledobjects $(K8S_IMAGE_REPOSITORY_NAME)-stage-microservice-chart autoscaling.keda.sh/paused-replicas="0"

# --- END ROLLBACK PROD --- #
